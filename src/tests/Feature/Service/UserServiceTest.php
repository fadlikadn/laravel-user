<?php
/**
 * Created by PhpStorm.
 * UserParam: dyangalih
 * Date: 2019-01-26
 * Time: 13:18
 */

namespace WebAppId\User\Tests\Feature\Services;


use WebAppId\User\Repositories\RoleRepository;
use WebAppId\User\Services\Params\ChangePasswordParam;
use WebAppId\User\Services\Params\UserParam;
use WebAppId\User\Services\UserService;
use WebAppId\User\Tests\TestCase;
use WebAppId\User\Tests\Unit\Repositories\UserRepositoryTest;

class UserServiceTest extends TestCase
{
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    public function userService(): UserService
    {
        return $this->getContainer()->make(UserService::class);
    }
    
    public function userRepositoryTest(): UserRepositoryTest
    {
        return $this->getContainer()->make(UserRepositoryTest::class);
    }
    
    public function roleRepository(): RoleRepository
    {
        return $this->getContainer()->make(RoleRepository::class);
    }
    
    public function getDummyUser(): UserParam
    {
        $userRepositoryTest = $this->userRepositoryTest();
        $userRepositoryTest->setUp();
        return $userRepositoryTest->getDummyUser();
    }
    
    public function testAddUser()
    {
        $dummy = $this->getDummyUser();
        
        $dummy->setRoleId($this->getFaker()->numberBetween(1, 2));
        
        $resultUser = $this->getContainer()->call([$this->userService(), 'addUser'], ['request' => $dummy]);
        if ($resultUser == null) {
            self::assertTrue(false);
        } else {
            self::assertTrue(true);
            $roleResult = $this->getContainer()->call([$this->roleRepository(), 'getRoleById'], ['id' => $dummy->getRoleId()]);
            
            self::assertEquals($dummy->getName(), $resultUser->getUser()->name);
            self::assertEquals($dummy->getEmail(), $resultUser->getUser()->email);
            
            if ($resultUser->getRoles() != null) {
                for ($i = 0; $i < count($resultUser->getRoles()); $i++) {
                    self::assertEquals($resultUser->getRoles()[$i]->name, $roleResult->name);
                }
            } else {
                self::assertTrue(false);
            }
            
        }
        return $dummy;
    }
    
    
    public function testUpdatePassword()
    {
        $dummyData = $this->testAddUser();
        $changePasswordParam = new ChangePasswordParam();
        
        
        $newPassword = $this->getFaker()->password;
        $changePasswordParam->setEmail($dummyData->getEmail());
        $changePasswordParam->setPassword($newPassword);
        $resultResetPassword = $this->getContainer()->call([$this->userService(), 'changePasswordByAdmin'], ['changePasswordParam' => $changePasswordParam]);
        $this->assertEquals($resultResetPassword->getStatus(), true);
        if($resultResetPassword->getStatus()){
            $dummyData->setPassword($newPassword);
        }
        
        
        /**
         * check not found user
         */
        
        $changePasswordParam->setEmail($this->getFaker()->email);
        $resultResetPassword = $this->getContainer()->call([$this->userService(), 'changePassword'], ['changePasswordParam' => $changePasswordParam]);
        $this->assertEquals($resultResetPassword->getStatus(), false);
        
        /**
         * test retype password not match
         */
        $changePasswordParam->setEmail($dummyData->getEmail());
        $changePasswordParam->setPassword($dummyData->getPassword());
        $changePasswordParam->setRetypePassword($this->getFaker()->password);
        $resultResetPassword = $this->getContainer()->call([$this->userService(), 'changePassword'], ['changePasswordParam' => $changePasswordParam]);
        $this->assertEquals($resultResetPassword->getStatus(), false);
        
        /**
         * test old password not match
         */
        $changePasswordParam->setEmail($dummyData->getEmail());
        $changePasswordParam->setPassword($dummyData->getPassword());
        $changePasswordParam->setRetypePassword($dummyData->getPassword());
        $changePasswordParam->setOldPassword($this->getFaker()->password);
        $resultResetPassword = $this->getContainer()->call([$this->userService(), 'changePassword'], ['changePasswordParam' => $changePasswordParam]);
        $this->assertEquals($resultResetPassword->getStatus(), false);
        
        /**
         * test correct value
         */
        
        $newPassword = $this->getFaker()->password;
        $changePasswordParam->setEmail($dummyData->getEmail());
        $changePasswordParam->setPassword($newPassword);
        $changePasswordParam->setRetypePassword($newPassword);
        $changePasswordParam->setOldPassword($dummyData->getPassword());
        $resultResetPassword = $this->getContainer()->call([$this->userService(), 'changePassword'], ['changePasswordParam' => $changePasswordParam]);
        $this->assertEquals($resultResetPassword->getStatus(), true);
        
    }
    
}